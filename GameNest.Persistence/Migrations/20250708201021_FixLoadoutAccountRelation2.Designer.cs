// <auto-generated />
using System;
using GameNest.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameNest.Persistence.Migrations
{
    [DbContext(typeof(GameNestContext))]
    [Migration("20250708201021_FixLoadoutAccountRelation2")]
    partial class FixLoadoutAccountRelation2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameNest.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int?>("ClanId")
                        .HasColumnType("int");

                    b.Property<int>("Coin")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("LoadoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CashPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Rarity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CashPrice = 100L,
                            CoinPrice = 1000L,
                            Description = "Assault rifle",
                            Level = 1L,
                            Name = "AK-47",
                            Rarity = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CashPrice = 120L,
                            CoinPrice = 1200L,
                            Description = "Submachine gun",
                            Level = 2L,
                            Name = "M4A1",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CashPrice = 200L,
                            CoinPrice = 2000L,
                            Description = "Sniper rifle",
                            Level = 5L,
                            Name = "AWP",
                            Rarity = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CashPrice = 50L,
                            CoinPrice = 500L,
                            Description = "Pistol",
                            Level = 1L,
                            Name = "Desert Eagle",
                            Rarity = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CashPrice = 90L,
                            CoinPrice = 900L,
                            Description = "Submachine gun",
                            Level = 2L,
                            Name = "UMP-45",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CashPrice = 40L,
                            CoinPrice = 400L,
                            Description = "Pistol",
                            Level = 1L,
                            Name = "Glock-18",
                            Rarity = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CashPrice = 110L,
                            CoinPrice = 1100L,
                            Description = "Assault rifle",
                            Level = 3L,
                            Name = "FAMAS",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 8L,
                            CashPrice = 95L,
                            CoinPrice = 950L,
                            Description = "Submachine gun",
                            Level = 2L,
                            Name = "MP5",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CashPrice = 130L,
                            CoinPrice = 1300L,
                            Description = "Assault rifle",
                            Level = 4L,
                            Name = "SG 553",
                            Rarity = 3L
                        },
                        new
                        {
                            Id = 10L,
                            CashPrice = 250L,
                            CoinPrice = 2500L,
                            Description = "Machine gun",
                            Level = 6L,
                            Name = "M249",
                            Rarity = 4L
                        },
                        new
                        {
                            Id = 11L,
                            CashPrice = 30L,
                            CoinPrice = 300L,
                            Description = "Head protection equipment",
                            Level = 1L,
                            Name = "Helmet",
                            Rarity = 1L
                        },
                        new
                        {
                            Id = 12L,
                            CashPrice = 60L,
                            CoinPrice = 600L,
                            Description = "Body armor equipment",
                            Level = 2L,
                            Name = "Body Armor",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CashPrice = 20L,
                            CoinPrice = 200L,
                            Description = "Explosive equipment",
                            Level = 1L,
                            Name = "Grenade",
                            Rarity = 1L
                        },
                        new
                        {
                            Id = 14L,
                            CashPrice = 80L,
                            CoinPrice = 800L,
                            Description = "Sniper scope equipment",
                            Level = 3L,
                            Name = "Scope",
                            Rarity = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CashPrice = 15L,
                            CoinPrice = 150L,
                            Description = "Gloves equipment",
                            Level = 1L,
                            Name = "Tactical Gloves",
                            Rarity = 1L
                        });
                });

            modelBuilder.Entity("GameNest.Domain.Entities.ItemInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("ItemInstances");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Loadout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HelmetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecondaryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ChestId");

                    b.HasIndex("HelmetId");

                    b.HasIndex("MainId");

                    b.HasIndex("SecondaryId");

                    b.ToTable("Loadouts");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Account", b =>
                {
                    b.HasOne("GameNest.Domain.Entities.Clan", "Clan")
                        .WithMany("Members")
                        .HasForeignKey("ClanId");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.ItemInstance", b =>
                {
                    b.HasOne("GameNest.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameNest.Domain.Entities.Account", "Account")
                        .WithMany("Items")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Loadout", b =>
                {
                    b.HasOne("GameNest.Domain.Entities.Account", "Account")
                        .WithOne("Loadout")
                        .HasForeignKey("GameNest.Domain.Entities.Loadout", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameNest.Domain.Entities.ItemInstance", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameNest.Domain.Entities.ItemInstance", "Helmet")
                        .WithMany()
                        .HasForeignKey("HelmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameNest.Domain.Entities.ItemInstance", "Main")
                        .WithMany()
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameNest.Domain.Entities.ItemInstance", "Secondary")
                        .WithMany()
                        .HasForeignKey("SecondaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chest");

                    b.Navigation("Helmet");

                    b.Navigation("Main");

                    b.Navigation("Secondary");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Account", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Loadout");
                });

            modelBuilder.Entity("GameNest.Domain.Entities.Clan", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
